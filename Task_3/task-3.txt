			КУРСОВАЯ РАБОТА ПО ПРЕДМЕТУ: Базы данных. PostgreSQL


	В качестве практического задания необходимо выполнить курсовой проект. За основу проекта можно взять
любой сервис на ваше усмотрение. Например, вы можете использовать любую социальную сеть (кроме
ВКонтакте), интернет-магазин, стриминговый сервис и т.д. Желательно чтобы вы понимали как работает
приложение, это упростит работу над проектом. Для выбранного сервиса необходимо последовательно
выполнить следующие шаги:
1. Проанализировать бизнес-логику приложения и создать структуру базы данных, которая может
использоваться для хранения данных этого приложения. В базе данных должно быть минимум десять
таблиц. Если таблиц получается более двадцати то рекомендуется ограничиться частью функционала
приложения и не превышать это количество. В качестве отчета по этой части проекта необходимо
приложить команды создания таблиц.
2. Используя генератор тестовых данных, заполнить созданную БД данными в количестве минимум сто
строк для тех таблиц, где это имеет смысл. Доработать данные запросами если это необходимо. В
качестве отчёта приложить дамп БД с данными.
3. Создать внешние ключи, если они не были созданы на шаге 1 в командах создания таблиц. В качестве
отчета приложить команды создания внешних ключей.
4. Создать диаграмму отношений. В качестве отчета приложить файл изображения диаграммы
отношений.
5. Создать два сложных (многотабличных) запроса с использованием подзапросов.
6. Создать два сложных запроса с использованием объединения JOIN и без использования подзапросов.
7. Создать два представления, в основе которых лежат сложные запросы.
8. Создать пользовательскую функцию.
9. Создать триггер.
10. Для одного из запросов, созданных в пункте 6, провести оптимизацию. В качестве отчета приложить
планы выполнения запроса, ваш анализ и показать действия, которые улучшили эффективность
запроса.




ВЫПОЛНЕНИЕ

3. Создаем внешние ключи и ограничения.
   Но сначала устраним нарушения целостности данных в таблице cart, а именно выход значений productid
   за пределы количества записей в products:

select * from cart where productid>150;
update cart set productid = productid - 50 where productid > 150 AND productid < 200;
update cart set productid = productid - 100 where productid > 150 AND productid < 250;
update cart set productid = productid - 150 where productid > 150 AND productid < 300;
update cart set productid = productid - 200 where productid > 150 AND productid < 350;
update cart set productid = productid - 250 where productid > 150 AND productid < 400;
update cart set productid = productid - 300 where productid > 150 AND productid < 450;
select * from cart where productid>150; 

Теперь в транзакции создаем внешние ключи и ограничения:

BEGIN;
-- Создадим внешний ключ для таблицы реквизитов пользователей для связи с пользователями
--ALTER TABLE userdetails DROP CONSTRAINT userdetails_userid_fk;
ALTER TABLE userdetails
  ADD CONSTRAINT userdetails_userid_fk 
  FOREIGN KEY (userid) 
  REFERENCES users (userid)
  ON DELETE CASCADE;

-- Создадим внешние ключи для таблицы ролей пользователей
-- ALTER TABLE userroles DROP CONSTRAINT userroles_userid_fk;
ALTER TABLE userroles
  ADD CONSTRAINT userroles_userid_fk 
  FOREIGN KEY (userid) 
  REFERENCES users (userid)
  ON DELETE CASCADE;
-- ALTER TABLE userroles DROP CONSTRAINT userroles_roleid_fk;
ALTER TABLE userroles
  ADD CONSTRAINT userroles_roleid_fk 
  FOREIGN KEY (roleid) 
  REFERENCES roles (roleid)
  ON DELETE CASCADE;

-- Создадим внешний ключ для таблицы продукции для связи с категориями продукции
-- Для удаления категории используем поле ismark
-- а вот удалять родительскую запись напрямую запретим
-- ALTER TABLE products DROP CONSTRAINT products_categoryid_fk;
ALTER TABLE products
  ADD CONSTRAINT products_categoryid_fk 
  FOREIGN KEY (categoryid) 
  REFERENCES categories (categoryid)
  ON DELETE RESTRICT;


-- Создадим внешний ключ для таблицы изображения товаров для связи с продукцией
-- ALTER TABLE productpics DROP CONSTRAINT productpics_productid_fk;
ALTER TABLE productpics
  ADD CONSTRAINT productpics_productid_fk 
  FOREIGN KEY (productid) 
  REFERENCES products (productid)
  ON DELETE CASCADE;


-- Создадим внешние ключи для таблицы корзины
-- ALTER TABLE cart DROP CONSTRAINT cart_userid_fk;
ALTER TABLE cart
  ADD CONSTRAINT cart_userid_fk 
  FOREIGN KEY (userid) 
  REFERENCES users (userid)
  ON DELETE CASCADE;
-- ALTER TABLE cart DROP CONSTRAINT cart_productid_fk;
ALTER TABLE cart
  ADD CONSTRAINT cart_productid_fk 
  FOREIGN KEY (productid) 
  REFERENCES products (productid)
  ON DELETE CASCADE;
-- ALTER TABLE cart DROP CONSTRAINT cart_orderstatusid_fk;
ALTER TABLE cart
  ADD CONSTRAINT cart_orderstatusid_fk 
  FOREIGN KEY (orderstatusid) 
  REFERENCES orderstatus (orderstatusid)
  ON DELETE CASCADE;


-- Создадим внешние ключи для таблицы заказов
-- ALTER TABLE orders DROP CONSTRAINT orders_userid_fk;
ALTER TABLE orders
  ADD CONSTRAINT orders_userid_fk 
  FOREIGN KEY (userid) 
  REFERENCES users (userid)
  ON DELETE RESTRICT;
-- ALTER TABLE orders DROP CONSTRAINT orders_orderstatusid_fk;
ALTER TABLE orders 
  ADD CONSTRAINT orders_orderstatusid_fk 
  FOREIGN KEY (orderstatusid) 
  REFERENCES orderstatus (orderstatusid)
  ON DELETE RESTRICT;

-- Создадим внешние ключи для таблицы деталей заказов
-- ALTER TABLE orderdetails DROP CONSTRAINT orderdetails_orderid_fk;
ALTER TABLE orderdetails
  ADD CONSTRAINT orderdetails_orderid_fk 
  FOREIGN KEY (orderid) 
  REFERENCES orders (orderid)
  ON DELETE CASCADE;
-- ALTER TABLE orderdetails DROP CONSTRAINT orderdetails_cartid_fk;
ALTER TABLE orderdetails
  ADD CONSTRAINT orders_cartid_fk 
  FOREIGN KEY (cartid) 
  REFERENCES cart (cartid)
  ON DELETE CASCADE;
-- ALTER TABLE orderdetails DROP CONSTRAINT orderdetails_productid_fk;
ALTER TABLE orderdetails
  ADD CONSTRAINT orderdetails_productid_fk 
  FOREIGN KEY (productid) 
  REFERENCES products (productid)
  ON DELETE RESTRICT;


-- Создадим внешний ключ для таблицы отзывов для связи с пользователями
-- ALTER TABLE reviews DROP CONSTRAINT reviews_userid_fk;
ALTER TABLE reviews
  ADD CONSTRAINT reviews_userid_fk 
  FOREIGN KEY (userid) 
  REFERENCES users (userid)
  ON DELETE CASCADE;
COMMIT;