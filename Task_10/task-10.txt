			КУРСОВАЯ РАБОТА ПО ПРЕДМЕТУ: Базы данных. PostgreSQL


	В качестве практического задания необходимо выполнить курсовой проект. За основу проекта можно взять
любой сервис на ваше усмотрение. Например, вы можете использовать любую социальную сеть (кроме
ВКонтакте), интернет-магазин, стриминговый сервис и т.д. Желательно чтобы вы понимали как работает
приложение, это упростит работу над проектом. Для выбранного сервиса необходимо последовательно
выполнить следующие шаги:
1. Проанализировать бизнес-логику приложения и создать структуру базы данных, которая может
использоваться для хранения данных этого приложения. В базе данных должно быть минимум десять
таблиц. Если таблиц получается более двадцати то рекомендуется ограничиться частью функционала
приложения и не превышать это количество. В качестве отчета по этой части проекта необходимо
приложить команды создания таблиц.
2. Используя генератор тестовых данных, заполнить созданную БД данными в количестве минимум сто
строк для тех таблиц, где это имеет смысл. Доработать данные запросами если это необходимо. В
качестве отчёта приложить дамп БД с данными.
3. Создать внешние ключи, если они не были созданы на шаге 1 в командах создания таблиц. В качестве
отчета приложить команды создания внешних ключей.
4. Создать диаграмму отношений. В качестве отчета приложить файл изображения диаграммы
отношений.
5. Создать два сложных (многотабличных) запроса с использованием подзапросов.
6. Создать два сложных запроса с использованием объединения JOIN и без использования подзапросов.
7. Создать два представления, в основе которых лежат сложные запросы.
8. Создать пользовательскую функцию.
9. Создать триггер.
10. Для одного из запросов, созданных в пункте 6, провести оптимизацию. В качестве отчета приложить
планы выполнения запроса, ваш анализ и показать действия, которые улучшили эффективность
запроса.




ВЫПОЛНЕНИЕ

10. Для одного из запросов, созданных в пункте 6, провести оптимизацию. В качестве отчета приложить
планы выполнения запроса, ваш анализ и показать действия, которые улучшили эффективность
запроса.


Запросы из 6 пункта.

-- С использованием агрегатного выражения
SELECT DISTINCT
	ct.CategoryId,
	ct.CategoryName,
	SUM(CASE WHEN o.isdelivery = true THEN 1 ELSE 0 END)  OrdersCountWODelivery,
	SUM(CASE WHEN o.isdelivery = true THEN o.ordersum ELSE 0 END) OrderSumWODelivery,
	SUM(CASE WHEN o.isdelivery = false THEN 1 ELSE 0 END) OrdersCountWDelivery,
	SUM(CASE WHEN o.isdelivery = false THEN o.ordersum ELSE 0 END) OrderSumWDelivery,
	SUM(CASE WHEN o.isdelivery = true THEN o.deliverysum ELSE 0 END) DeliverySum
FROM orders o INNER JOIN orderdetails d ON o.orderid = d.orderid
	INNER JOIN products pr ON d.productid = pr.productid
	INNER JOIN categories ct ON pr.categoryid = ct.categoryid
GROUP BY ct.CategoryId
ORDER BY ct.CategoryName;

Получаем план построения запроса, аналитику и статистику. (сохраняем в картинках pic10-1-....) :
EXPLAIN (FORMAT JSON) SELECT DISTINCT
	ct.CategoryId,
	ct.CategoryName,
	SUM(CASE WHEN o.isdelivery = true THEN 1 ELSE 0 END)  OrdersCountWODelivery,
	SUM(CASE WHEN o.isdelivery = true THEN o.ordersum ELSE 0 END) OrderSumWODelivery,
	SUM(CASE WHEN o.isdelivery = false THEN 1 ELSE 0 END) OrdersCountWDelivery,
	SUM(CASE WHEN o.isdelivery = false THEN o.ordersum ELSE 0 END) OrderSumWDelivery,
	SUM(CASE WHEN o.isdelivery = true THEN o.deliverysum ELSE 0 END) DeliverySum
FROM orders o INNER JOIN orderdetails d ON o.orderid = d.orderid
	INNER JOIN products pr ON d.productid = pr.productid
	INNER JOIN categories ct ON pr.categoryid = ct.categoryid
GROUP BY ct.CategoryId
ORDER BY ct.CategoryName;

Видим что этот рапрос работает быстрее чем на оконных функциях и более оптимален. Нет лишней 
операции Sort. Время выполнения запроса: 49ms


-- С использованием оконных функций
SELECT DISTINCT
	ct.CategoryId,
	ct.CategoryName,
	SUM(CASE WHEN o.isdelivery = true THEN 1 ELSE 0 END) OVER (PARTITION BY ct.CategoryId) OrdersCountWODelivery,
	SUM(CASE WHEN o.isdelivery = true THEN o.ordersum ELSE 0 END) OVER (PARTITION BY ct.CategoryId) OrderSumWODelivery,
	SUM(CASE WHEN o.isdelivery = false THEN 1 ELSE 0 END) OVER (PARTITION BY ct.CategoryId) OrdersCountWDelivery,
	SUM(CASE WHEN o.isdelivery = false THEN o.ordersum ELSE 0 END) OVER (PARTITION BY ct.CategoryId) OrderSumWDelivery,
	SUM(CASE WHEN o.isdelivery = true THEN o.deliverysum ELSE 0 END) OVER (PARTITION BY ct.CategoryId) DeliverySum
FROM orders o INNER JOIN orderdetails d ON o.orderid = d.orderid
	INNER JOIN products pr ON d.productid = pr.productid
	INNER JOIN categories ct ON pr.categoryid = ct.categoryid
ORDER BY ct.CategoryName;


Получаем план построения запроса, аналитику и статистику. (сохраняем в картинках pic10-2-...) :
EXPLAIN (FORMAT JSON) SELECT DISTINCT
	ct.CategoryId,
	ct.CategoryName,
	SUM(CASE WHEN o.isdelivery = true THEN 1 ELSE 0 END) OVER (PARTITION BY ct.CategoryId) OrdersCountWODelivery,
	SUM(CASE WHEN o.isdelivery = true THEN o.ordersum ELSE 0 END) OVER (PARTITION BY ct.CategoryId) OrderSumWODelivery,
	SUM(CASE WHEN o.isdelivery = false THEN 1 ELSE 0 END) OVER (PARTITION BY ct.CategoryId) OrdersCountWDelivery,
	SUM(CASE WHEN o.isdelivery = false THEN o.ordersum ELSE 0 END) OVER (PARTITION BY ct.CategoryId) OrderSumWDelivery,
	SUM(CASE WHEN o.isdelivery = true THEN o.deliverysum ELSE 0 END) OVER (PARTITION BY ct.CategoryId) DeliverySum
FROM orders o INNER JOIN orderdetails d ON o.orderid = d.orderid
	INNER JOIN products pr ON d.productid = pr.productid
	INNER JOIN categories ct ON pr.categoryid = ct.categoryid
ORDER BY ct.CategoryName;


Из плана построения запроса очивидно более медленное выполнение запроса чем на агрегатных функциях. В этом запросе есть лишняя 
операция Sort. Время выполнения запроса: 72ms



ОПТИМИЗАЦИЯ

Смотрим индексы используются в таблицах:
SELECT indexname FROM pg_indexes WHERE tablename = 'products';
SELECT indexname FROM pg_indexes WHERE tablename = 'categories';
SELECT indexname FROM pg_indexes WHERE tablename = 'orders';
SELECT indexname FROM pg_indexes WHERE tablename = 'orderdetails';

По результатам выборок видно, что в каждой таблице есть только первичный ключ:
"indexname"
"products_pkey" 
"indexname"
"categories_pkey" 
"indexname"
"orders_pkey" 
"indexname"
"orderdetails_pkey" 

С т.з. оптимизации, первый запрос уже вполне оптимален. Можно даже сказать, что первый запрос на Group by - это оптимизация
запроса на оконнных функциях.

Попробуем провести оптимизацию, путем уменьшения времени запроса. Создадим индексы:
CREATE INDEX productscategoryidfk ON products (categoryid);
CREATE INDEX orderdetailsproductidfk ON orderdetails (productid);
CREATE INDEX orderdetailsorderidfk ON orderdetails (orderid);

И проверяем:
SELECT indexname FROM pg_indexes WHERE tablename = 'products';
SELECT indexname FROM pg_indexes WHERE tablename = 'categories';
SELECT indexname FROM pg_indexes WHERE tablename = 'orders';
SELECT indexname FROM pg_indexes WHERE tablename = 'orderdetails';

"indexname"
"orderdetails_pkey"
"orderdetailsproductidfk"
"orderdetailsorderidfk"

Индексы созданы.

Обновим статистику по таблицам:
ANALYZE products;
ANALYZE categories;
ANALYZE orders;
ANALYZE orderdetails;

Проверим еще раз запрос:
EXPLAIN (FORMAT JSON) SELECT DISTINCT
	ct.CategoryId,
	ct.CategoryName,
	SUM(CASE WHEN o.isdelivery = true THEN 1 ELSE 0 END)  OrdersCountWODelivery,
	SUM(CASE WHEN o.isdelivery = true THEN o.ordersum ELSE 0 END) OrderSumWODelivery,
	SUM(CASE WHEN o.isdelivery = false THEN 1 ELSE 0 END) OrdersCountWDelivery,
	SUM(CASE WHEN o.isdelivery = false THEN o.ordersum ELSE 0 END) OrderSumWDelivery,
	SUM(CASE WHEN o.isdelivery = true THEN o.deliverysum ELSE 0 END) DeliverySum
FROM orders o INNER JOIN orderdetails d ON o.orderid = d.orderid
	INNER JOIN products pr ON d.productid = pr.productid
	INNER JOIN categories ct ON pr.categoryid = ct.categoryid
GROUP BY ct.CategoryId
ORDER BY ct.CategoryName;

Время выполнения запроса: 25ms

Время сократилось в два раза. 
Посмотрим план запроса, аналитику и статистику (сохраняем в картинках pic10-optimization-...)

Видим что отдельные итерации запроса стали быстрее. Посмотрим сравнение аналитики планов запроса
до создания внешних ключей и и после - на картинке pic10-compare.png 


